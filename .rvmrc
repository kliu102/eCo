#!/bin/bash
#
# NOTE: If you MUST have a different gemset name, just create a .rvmrc.gemset file in the project root and put the name
#       of the gemset you want to use in there, like:
#       % echo "i_am_too_picky" > .rvmrc.gemset
#       Also, if you must use a different Ruby, create an .rvmrc.local with the ruby version
# % echo "1.9.3" > .rvmrc.local

command_gemset="my_store"
command_ruby="ruby-2.1.2"
if [ -d "$TM_PROJECT_DIRECTORY" ]; then
  DIR="$TM_PROJECT_DIRECTORY"
else
  if [ -n $BASH_SOURCE ]; then
    source_filename=$BASH_SOURCE
  else
    source_filename=$0
  fi
  DIR="$( cd "$( dirname "$source_filename" )" > /dev/null && pwd )"
fi

ruby_override_file="$DIR/.rvmrc.local"
gemset_override_file="$DIR/.rvmrc.gemset"
gemfile_override_file="$DIR/Gemfile.local"

# Use a local gemset if provided
if [ -f "$gemset_override_file" ]; then
  command_gemset=`cat "$gemset_override_file"`
fi

if [ -f "$ruby_override_file" ]; then
  command_ruby=`cat "$ruby_override_file"`
fi

if [ -f "$gemfile_override_file" ]; then
  export BUNDLE_GEMFILE="$gemfile_override_file"
fi

rvm use $command_ruby@$command_gemset --create
